#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W         &kp E         &kp R     &kp T                                           &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F     &kp G        &kp TAB             &kp DEL        &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V     &kp B        &kp LEFT_SHIFT      &kp BACKSPACE  &kp N        &kp M  &kp COMMA  &kp DOT  &kp QUESTION
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &mkp MB1  &lt 2 SPACE  &lt 5 TAB           &mkp MB2       &lt 1 ENTER                             &lt 1 BACKSPACE
            >;
        };

        FUNCTION {
            bindings = <
&trans    &kp UP_ARROW  &trans     &trans  &trans                      &trans  &trans  &trans          &trans        &trans
&kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans  &trans      &trans  &trans  &trans  &trans          &kp UP_ARROW  &trans
&trans    &trans        &trans     &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT
&trans    &trans        &trans     &trans  &trans  &trans      &trans  &trans                                        &trans
            >;
        };

        NUM {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                         &kp N7        &kp N8        &kp N9        &kp KP_SLASH     &kp MINUS
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &kp CAPS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_ASTERISK  &kp KP_PLUS
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &kp N0    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD       &trans
&trans   &trans   &trans  &trans  &trans   &trans      &trans    &trans                                                     &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&kp RIGHT_PARENTHESIS  &kp UNDER         &kp LEFT_BRACE   &kp NON_US_HASH  &kp COLON                             &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp RPAR               &kp EQUAL         &kp RIGHT_BRACE  &kp NUHS         &kp SINGLE_QUOTE  &trans      &trans  &trans  &trans  &trans  &kp SEMICOLON     &kp BACKSLASH
&kp RIGHT_PARENTHESIS  &kp PLUS          &kp BACKSLASH    &kp TILDE2       &kp SQT           &trans      &trans  &trans  &trans  &trans  &kp SINGLE_QUOTE  &kp ASTRK
&kp UNDERSCORE         &kp LEFT_BRACKET  &kp PIPE         &trans           &trans            &trans      &trans  &trans                                    &kp LEFT_PARENTHESIS
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
